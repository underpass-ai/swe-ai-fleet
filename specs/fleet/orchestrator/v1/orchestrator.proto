syntax = "proto3";

package fleet.orchestrator.v1;

// Python uses flat package to avoid import complexity
option py_generic_services = true;

// Orchestrator Service - Coordinates multi-agent deliberation and task execution
service OrchestratorService {
  // ========== Synchronous Coordination (from Gateway) ==========
  
  // Execute peer deliberation on a task
  rpc Deliberate(DeliberateRequest) returns (DeliberateResponse);
  
  // Orchestrate complete task execution workflow
  rpc Orchestrate(OrchestrateRequest) returns (OrchestrateResponse);
  
  // Stream deliberation progress for long-running operations
  rpc StreamDeliberation(DeliberateRequest) returns (stream DeliberationUpdate);
  
  // Get result of an async deliberation (Ray-based execution)
  rpc GetDeliberationResult(GetDeliberationResultRequest) returns (GetDeliberationResultResponse);
  
  // ========== Agent & Council Management ==========
  
  // Register an agent in a council
  rpc RegisterAgent(RegisterAgentRequest) returns (RegisterAgentResponse);
  
  // Create a council for a specific role
  rpc CreateCouncil(CreateCouncilRequest) returns (CreateCouncilResponse);
  
  // List all active councils
  rpc ListCouncils(ListCouncilsRequest) returns (ListCouncilsResponse);
  
  // Delete a council
  rpc DeleteCouncil(DeleteCouncilRequest) returns (DeleteCouncilResponse);
  
  // Remove an agent from a council
  rpc UnregisterAgent(UnregisterAgentRequest) returns (UnregisterAgentResponse);
  
  // ========== Event Processing (internal from NATS) ==========
  
  // Process a planning event (called internally by NATS consumer)
  rpc ProcessPlanningEvent(PlanningEventRequest) returns (PlanningEventResponse);
  
  // Derive atomic subtasks from a case/plan
  rpc DeriveSubtasks(DeriveSubtasksRequest) returns (DeriveSubtasksResponse);
  
  // ========== Context Integration ==========
  
  // Get hydrated context for a task (wrapper/cache for Context Service)
  rpc GetTaskContext(GetTaskContextRequest) returns (GetTaskContextResponse);
  
  // ========== Health & Observability ==========
  
  // Get orchestrator service health and stats
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
  
  // Get detailed performance metrics
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);
}

// Deliberate Request - Coordinates peer review between agents
message DeliberateRequest {
  string task_description = 1;
  string role = 2;  // DEV, QA, ARCHITECT, DEVOPS, DATA
  TaskConstraints constraints = 3;
  int32 rounds = 4;  // Number of peer review rounds (default: 1)
  int32 num_agents = 5;  // Number of agents in council (default: 3)
}

// Deliberate Response - Ranked proposals from deliberation
message DeliberateResponse {
  repeated DeliberationResult results = 1;
  string winner_id = 2;
  int64 duration_ms = 3;
  OrchestratorMetadata metadata = 4;
}

// GetDeliberationResult Request - Query status of async deliberation
message GetDeliberationResultRequest {
  string task_id = 1;  // Task ID from async deliberation
}

// GetDeliberationResult Response - Status and results of deliberation
message GetDeliberationResultResponse {
  string task_id = 1;
  DeliberationStatus status = 2;
  repeated DeliberationResult results = 3;  // Empty if not completed
  string winner_id = 4;  // Empty if not completed
  int64 duration_ms = 5;
  string error_message = 6;  // Set if status is FAILED
  OrchestratorMetadata metadata = 7;
}

// DeliberationStatus - Status of async deliberation
enum DeliberationStatus {
  DELIBERATION_STATUS_UNKNOWN = 0;
  DELIBERATION_STATUS_PENDING = 1;    // Jobs submitted, waiting for results
  DELIBERATION_STATUS_IN_PROGRESS = 2; // Some results received
  DELIBERATION_STATUS_COMPLETED = 3;   // All results received
  DELIBERATION_STATUS_FAILED = 4;      // Deliberation failed
  DELIBERATION_STATUS_TIMEOUT = 5;     // Deliberation timed out
}

// Orchestrate Request - Complete task execution workflow
message OrchestrateRequest {
  string task_id = 1;
  string task_description = 2;
  string role = 3;  // Role/council to handle task
  TaskConstraints constraints = 4;
  OrchestratorOptions options = 5;
  
  // Context integration fields
  string case_id = 6;      // For Context Service hydration
  string story_id = 7;     // For reference tracking
  string plan_id = 8;      // For plan context
  ContextOptions context_options = 9; // Context hydration options
}

// Orchestrate Response - Winner and all candidates
message OrchestrateResponse {
  DeliberationResult winner = 1;
  repeated DeliberationResult candidates = 2;
  string execution_id = 3;
  int64 duration_ms = 4;
  OrchestratorMetadata metadata = 5;
}

// Get Status Request
message GetStatusRequest {
  bool include_stats = 1;
}

// Get Status Response
message GetStatusResponse {
  string status = 1;
  int64 uptime_seconds = 2;
  OrchestratorStats stats = 3;
}

// Task Constraints - Rubric and requirements
message TaskConstraints {
  string rubric = 1;
  repeated string requirements = 2;
  map<string, string> metadata = 3;
  int32 max_iterations = 4;
  int32 timeout_seconds = 5;
}

// Orchestrator Options
message OrchestratorOptions {
  bool enable_peer_review = 1;
  int32 deliberation_rounds = 2;
  bool enable_architect_selection = 3;
  map<string, string> custom_params = 4;
}

// Deliberation Result - Proposal with checks and score
message DeliberationResult {
  Proposal proposal = 1;
  CheckSuite checks = 2;
  double score = 3;
  int32 rank = 4;
}

// Proposal from an agent
message Proposal {
  string author_id = 1;
  string author_role = 2;
  string content = 3;
  int64 created_at_ms = 4;
  repeated string revisions = 5;
}

// Check Suite - Collection of checks
message CheckSuite {
  PolicyResult policy = 1;
  LintResult lint = 2;
  DryRunResult dryrun = 3;
  repeated CheckResult additional_checks = 4;
  bool all_passed = 5;
}

// Policy Check Result
message PolicyResult {
  bool passed = 1;
  repeated string violations = 2;
  string message = 3;
}

// Lint Check Result
message LintResult {
  bool passed = 1;
  int32 error_count = 2;
  int32 warning_count = 3;
  repeated string errors = 4;
}

// Dry Run Check Result
message DryRunResult {
  bool passed = 1;
  string output = 2;
  int32 exit_code = 3;
  string message = 4;
}

// Generic Check Result
message CheckResult {
  string check_type = 1;
  bool passed = 2;
  double score = 3;
  string message = 4;
  map<string, string> details = 5;
}

// Orchestrator Metadata
message OrchestratorMetadata {
  string orchestrator_version = 1;
  int64 timestamp_ms = 2;
  string execution_id = 3;
  map<string, string> tags = 4;
}

// Orchestrator Stats
message OrchestratorStats {
  int64 total_deliberations = 1;
  int64 total_orchestrations = 2;
  double avg_deliberation_time_ms = 3;
  int64 active_councils = 4;
  map<string, int64> role_counts = 5;
}

// ========== New Messages for Refactored API ==========

// Context Options - How to hydrate context
message ContextOptions {
  bool include_timeline = 1;
  bool include_decisions = 2;
  bool include_summaries = 3;
  int32 max_events = 4;
  repeated string scopes = 5;  // Context scopes to include
}

// Deliberation Update - Streaming progress
message DeliberationUpdate {
  string status = 1;          // "generating", "reviewing", "scoring", "complete"
  int32 progress_percent = 2;
  string current_step = 3;
  string current_agent = 4;
  DeliberationResult partial_result = 5;  // Partial results as they complete
}

// ========== Agent Management ==========

message RegisterAgentRequest {
  string agent_id = 1;
  string role = 2;               // DEV, QA, etc.
  AgentCapabilities capabilities = 3;
  string endpoint = 4;           // If agent is external service (optional)
  map<string, string> metadata = 5;
}

message RegisterAgentResponse {
  bool success = 1;
  string message = 2;
  string council_id = 3;
}

message AgentCapabilities {
  repeated string supported_tasks = 1;
  string model_profile = 2;
  int32 max_concurrent_tasks = 3;
  repeated string languages = 4;  // Programming languages
}

message CreateCouncilRequest {
  string role = 1;
  int32 num_agents = 2;
  CouncilConfig config = 3;
}

message CreateCouncilResponse {
  string council_id = 1;
  int32 agents_created = 2;
  repeated string agent_ids = 3;
}

message CouncilConfig {
  int32 deliberation_rounds = 1;
  bool enable_peer_review = 2;
  string model_profile = 3;
  map<string, string> custom_params = 4;
  string agent_type = 5;  // "MOCK", "VLLM", "RAY_VLLM" (default: RAY_VLLM for E2E)
}

message ListCouncilsRequest {
  string role_filter = 1;  // Optional: filter by role
  bool include_agents = 2; // Include agent details
}

message ListCouncilsResponse {
  repeated CouncilInfo councils = 1;
}

message CouncilInfo {
  string council_id = 1;
  string role = 2;
  int32 num_agents = 3;
  repeated AgentInfo agents = 4;
  string status = 5;  // "active", "idle", "busy"
  string model = 6;   // Model used by council agents (e.g., "Qwen/Qwen3-0.6B")
}

message AgentInfo {
  string agent_id = 1;
  string role = 2;
  string status = 3;  // "ready", "busy", "offline"
  AgentCapabilities capabilities = 4;
}

message DeleteCouncilRequest {
  string role = 1;  // Role of the council to delete (DEV, QA, etc.)
}

message DeleteCouncilResponse {
  bool success = 1;
  string message = 2;
  int32 agents_removed = 3;
}

message UnregisterAgentRequest {
  string agent_id = 1;
  string role = 2;
}

message UnregisterAgentResponse {
  bool success = 1;
  string message = 2;
}

// ========== Event Processing ==========

message PlanningEventRequest {
  string event_type = 1;    // TRANSITION, CASE_CREATED, TASK_ASSIGNED, etc.
  string case_id = 2;
  string plan_id = 3;
  string from_state = 4;
  string to_state = 5;
  int64 timestamp_ms = 6;
  map<string, string> metadata = 7;
}

message PlanningEventResponse {
  bool processed = 1;
  string message = 2;
  repeated string derived_task_ids = 3;  // Tasks created from this event
}

message DeriveSubtasksRequest {
  string case_id = 1;
  string plan_id = 2;
  repeated string roles = 3;    // Roles to derive tasks for (DEV, QA, etc.)
  DerivationStrategy strategy = 4;
}

message DeriveSubtasksResponse {
  repeated AtomicTask tasks = 1;
  string derivation_id = 2;
  int32 total_tasks = 3;
}

message DerivationStrategy {
  bool parallel_execution = 1;
  repeated string dependency_order = 2;  // Task execution order
  int32 max_tasks_per_role = 3;
  bool auto_publish_to_nats = 4;  // Auto-publish to agent.requests
}

message AtomicTask {
  string task_id = 1;
  string role = 2;
  string description = 3;
  repeated string dependencies = 4;  // Task IDs this depends on
  TaskConstraints constraints = 5;
  string case_id = 6;
  string plan_id = 7;
  int32 priority = 8;
}

// ========== Context Integration ==========

message GetTaskContextRequest {
  string task_id = 1;
  string case_id = 2;
  string story_id = 3;
  string role = 4;
  string phase = 5;  // DESIGN, BUILD, TEST, DOCS
  ContextOptions options = 6;
}

message GetTaskContextResponse {
  string context_text = 1;    // Serialized context
  ContextBlocks blocks = 2;   // Structured context
  int32 token_count = 3;
  string version_hash = 4;
}

message ContextBlocks {
  string system = 1;    // System prompt
  string context = 2;   // Case/plan context
  string tools = 3;     // Available tools
  string history = 4;   // Recent history
}

// ========== Metrics ==========

message GetMetricsRequest {
  string metric_type = 1;  // "performance", "agents", "councils", "all"
  int64 time_range_ms = 2; // Time range for metrics
}

message GetMetricsResponse {
  PerformanceMetrics performance = 1;
  AgentMetrics agents = 2;
  CouncilMetrics councils = 3;
}

message PerformanceMetrics {
  double avg_deliberation_ms = 1;
  double avg_orchestration_ms = 2;
  double p50_latency_ms = 3;
  double p95_latency_ms = 4;
  double p99_latency_ms = 5;
}

message AgentMetrics {
  int64 total_agents = 1;
  int64 active_agents = 2;
  map<string, int64> agents_per_role = 3;
  double avg_agent_response_time_ms = 4;
}

message CouncilMetrics {
  int64 total_councils = 1;
  int64 active_councils = 2;
  map<string, CouncilHealth> health_per_council = 3;
}

message CouncilHealth {
  string status = 1;
  int32 available_agents = 2;
  int32 busy_agents = 3;
  double success_rate = 4;
}

