# src/swe_ai_fleet/context/ports/graph_ports.py
from __future__ import annotations
from typing import Any, Dict, Iterable, List, Mapping, Optional, Sequence, Protocol

class GraphCommandPort(Protocol):
    def init_constraints(self, labels: Sequence[str]) -> None: ...
    def upsert_entity(self, label: str, id: str, properties: Optional[Mapping[str, Any]] = None) -> None: ...
    def upsert_entity_multi(self, labels: Iterable[str], id: str, properties: Optional[Mapping[str, Any]] = None) -> None: ...
    def relate(self, src_id: str, rel_type: str, dst_id: str, *,
               src_labels: Optional[Iterable[str]]=None,
               dst_labels: Optional[Iterable[str]]=None,
               properties: Optional[Mapping[str, Any]]=None) -> None: ...

class GraphQueryPort(Protocol):
    def query(self, cypher: str, params: Optional[Mapping[str, Any]] = None) -> List[Dict[str, Any]]: ...
    # convenience reads
    def case_plan(self, case_id: str) -> List[Dict[str, Any]]: ...
    def node_with_neighbors(self, node_id: str, depth: int = 1) -> List[Dict[str, Any]]: ...
