// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: planning.proto

package planningv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlanningService_CreateStory_FullMethodName = "/fleet.planning.v1.PlanningService/CreateStory"
	PlanningService_ListStories_FullMethodName = "/fleet.planning.v1.PlanningService/ListStories"
	PlanningService_GetStory_FullMethodName    = "/fleet.planning.v1.PlanningService/GetStory"
	PlanningService_Transition_FullMethodName  = "/fleet.planning.v1.PlanningService/Transition"
	PlanningService_GetPlan_FullMethodName     = "/fleet.planning.v1.PlanningService/GetPlan"
)

// PlanningServiceClient is the client API for PlanningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PlanningService manages the agile lifecycle FSM and story state
type PlanningServiceClient interface {
	CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error)
	ListStories(ctx context.Context, in *ListStoriesRequest, opts ...grpc.CallOption) (*ListStoriesResponse, error)
	GetStory(ctx context.Context, in *GetStoryRequest, opts ...grpc.CallOption) (*GetStoryResponse, error)
	Transition(ctx context.Context, in *TransitionRequest, opts ...grpc.CallOption) (*TransitionResponse, error)
	GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanResponse, error)
}

type planningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanningServiceClient(cc grpc.ClientConnInterface) PlanningServiceClient {
	return &planningServiceClient{cc}
}

func (c *planningServiceClient) CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*CreateStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStoryResponse)
	err := c.cc.Invoke(ctx, PlanningService_CreateStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planningServiceClient) ListStories(ctx context.Context, in *ListStoriesRequest, opts ...grpc.CallOption) (*ListStoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoriesResponse)
	err := c.cc.Invoke(ctx, PlanningService_ListStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planningServiceClient) GetStory(ctx context.Context, in *GetStoryRequest, opts ...grpc.CallOption) (*GetStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoryResponse)
	err := c.cc.Invoke(ctx, PlanningService_GetStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planningServiceClient) Transition(ctx context.Context, in *TransitionRequest, opts ...grpc.CallOption) (*TransitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransitionResponse)
	err := c.cc.Invoke(ctx, PlanningService_Transition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planningServiceClient) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*GetPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlanResponse)
	err := c.cc.Invoke(ctx, PlanningService_GetPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanningServiceServer is the server API for PlanningService service.
// All implementations must embed UnimplementedPlanningServiceServer
// for forward compatibility.
//
// PlanningService manages the agile lifecycle FSM and story state
type PlanningServiceServer interface {
	CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error)
	ListStories(context.Context, *ListStoriesRequest) (*ListStoriesResponse, error)
	GetStory(context.Context, *GetStoryRequest) (*GetStoryResponse, error)
	Transition(context.Context, *TransitionRequest) (*TransitionResponse, error)
	GetPlan(context.Context, *GetPlanRequest) (*GetPlanResponse, error)
	mustEmbedUnimplementedPlanningServiceServer()
}

// UnimplementedPlanningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlanningServiceServer struct{}

func (UnimplementedPlanningServiceServer) CreateStory(context.Context, *CreateStoryRequest) (*CreateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStory not implemented")
}
func (UnimplementedPlanningServiceServer) ListStories(context.Context, *ListStoriesRequest) (*ListStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStories not implemented")
}
func (UnimplementedPlanningServiceServer) GetStory(context.Context, *GetStoryRequest) (*GetStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStory not implemented")
}
func (UnimplementedPlanningServiceServer) Transition(context.Context, *TransitionRequest) (*TransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transition not implemented")
}
func (UnimplementedPlanningServiceServer) GetPlan(context.Context, *GetPlanRequest) (*GetPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedPlanningServiceServer) mustEmbedUnimplementedPlanningServiceServer() {}
func (UnimplementedPlanningServiceServer) testEmbeddedByValue()                         {}

// UnsafePlanningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanningServiceServer will
// result in compilation errors.
type UnsafePlanningServiceServer interface {
	mustEmbedUnimplementedPlanningServiceServer()
}

func RegisterPlanningServiceServer(s grpc.ServiceRegistrar, srv PlanningServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlanningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlanningService_ServiceDesc, srv)
}

func _PlanningService_CreateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningServiceServer).CreateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanningService_CreateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningServiceServer).CreateStory(ctx, req.(*CreateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanningService_ListStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningServiceServer).ListStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanningService_ListStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningServiceServer).ListStories(ctx, req.(*ListStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanningService_GetStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningServiceServer).GetStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanningService_GetStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningServiceServer).GetStory(ctx, req.(*GetStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanningService_Transition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningServiceServer).Transition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanningService_Transition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningServiceServer).Transition(ctx, req.(*TransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanningService_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanningServiceServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanningService_GetPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanningServiceServer).GetPlan(ctx, req.(*GetPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanningService_ServiceDesc is the grpc.ServiceDesc for PlanningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fleet.planning.v1.PlanningService",
	HandlerType: (*PlanningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStory",
			Handler:    _PlanningService_CreateStory_Handler,
		},
		{
			MethodName: "ListStories",
			Handler:    _PlanningService_ListStories_Handler,
		},
		{
			MethodName: "GetStory",
			Handler:    _PlanningService_GetStory_Handler,
		},
		{
			MethodName: "Transition",
			Handler:    _PlanningService_Transition_Handler,
		},
		{
			MethodName: "GetPlan",
			Handler:    _PlanningService_GetPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "planning.proto",
}
