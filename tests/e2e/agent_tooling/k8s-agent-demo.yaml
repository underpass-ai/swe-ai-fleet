---
# Demo Job: Agent executes task and shows reasoning logs
apiVersion: batch/v1
kind: Job
metadata:
  name: agent-tooling-demo
  namespace: swe-ai-fleet
  labels:
    app: agent-demo
    component: demo
spec:
  ttlSecondsAfterFinished: 3600  # Keep for 1 hour
  backoffLimit: 0  # Don't retry
  template:
    metadata:
      labels:
        app: agent-demo
    spec:
      restartPolicy: Never
      securityContext:
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      initContainers:
        - name: clone-repo
          image: docker.io/alpine/git:v2.43.0
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "📥 Cloning repository..."
              git clone https://github.com/underpass-ai/swe-ai-fleet.git /workspace
              cd /workspace
              git checkout feature/agent-tools-enhancement
              chown -R 1000:1000 /workspace
              echo "✓ Repository ready"
          volumeMounts:
            - name: workspace
              mountPath: /workspace
          securityContext:
            runAsUser: 0
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ALL]
              add: [CHOWN]
      
      containers:
        - name: agent-demo
          image: registry.underpassai.com/swe-fleet/agent-tools-test:v0.1.0
          imagePullPolicy: Always
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop: [ALL]
          
          command:
            - /bin/bash
            - -c
            - |
              set -e
              
              echo "🤖 SWE AI Fleet - Agent Demo with Reasoning Logs"
              echo "=================================================="
              echo ""
              
              # Configure git
              git config --global user.name "Demo Agent"
              git config --global user.email "demo@swe-ai-fleet.local"
              git config --global init.defaultBranch main
              
              # Install dependencies
              echo "📦 Installing dependencies..."
              pip install --user -q -e ".[dev,grpc]"
              pip install --user -q requests psycopg2-binary
              
              echo ""
              echo "🎯 Demo: Agent Planning with Tools"
              echo "===================================="
              echo ""
              
              # Create Python script to run agent
              cat > /tmp/demo_agent.py << 'DEMO_SCRIPT'
              import asyncio
              import json
              import sys
              from pathlib import Path
              
              # Add src to path
              sys.path.insert(0, '/workspace/src')
              
              from swe_ai_fleet.agents import VLLMAgent
              
              async def main():
                  print("🚀 Creating DEV agent with tools...")
                  print("")
                  
                  # Create agent
                  agent = VLLMAgent(
                      agent_id="agent-demo-001",
                      role="DEV",
                      workspace_path="/workspace",
                      enable_tools=True,
                  )
                  
                  print(f"✓ Agent initialized: {agent.agent_id}")
                  print(f"✓ Role: {agent.role}")
                  print(f"✓ Mode: {'Full execution' if agent.enable_tools else 'Planning only'}")
                  print(f"✓ Tools available: {len(agent.tools)}")
                  print("")
                  
                  # Simulate smart context from Context Service
                  smart_context = """
              Story: DEMO-001 - Demonstrate agent tooling
              Phase: BUILD
              Role: DEV
              
              Task: Add a simple greeting function to demonstrate tool usage
              
              Relevant Context:
              - Python 3.13 project
              - src/ directory contains source code
              - tests/ directory for tests
              """
                  
                  print("📋 Task: Add hello_demo() function to src/__init__.py")
                  print("")
                  print("💭 Agent Reasoning (watch the agent think):")
                  print("=" * 80)
                  print("")
                  
                  # Execute task
                  result = await agent.execute_task(
                      task="Add hello_demo() function to src/__init__.py that returns 'Demo successful!'",
                      context=smart_context,
                      constraints={
                          "max_operations": 10,
                          "abort_on_error": False,
                      }
                  )
                  
                  print("")
                  print("=" * 80)
                  print("")
                  print("📊 Results:")
                  print(f"  Success: {result.success}")
                  print(f"  Operations: {len(result.operations)}")
                  print(f"  Artifacts: {list(result.artifacts.keys())}")
                  print("")
                  
                  print("🧠 Agent Reasoning Log:")
                  print("-" * 80)
                  for i, thought in enumerate(result.reasoning_log, 1):
                      icon = {
                          "analysis": "🔍",
                          "decision": "🤔",
                          "action": "⚡",
                          "observation": "👁️",
                          "conclusion": "✅",
                          "error": "❌"
                      }.get(thought["type"], "💭")
                      
                      conf = f" (confidence: {thought['confidence']})" if thought.get('confidence') else ""
                      print(f"{i}. {icon} [{thought['type'].upper()}] {thought['content']}{conf}")
                  
                  print("")
                  print("📝 Operations Executed:")
                  print("-" * 80)
                  for op in result.operations:
                      status = "✅" if op["success"] else "❌"
                      print(f"  {status} Step {op['step']}: {op['tool']}.{op['operation']}")
                  
                  print("")
                  print("🎯 Artifacts:")
                  print("-" * 80)
                  for key, value in result.artifacts.items():
                      print(f"  {key}: {value}")
                  
                  print("")
                  
                  # Verify file was modified
                  if Path("/workspace/src/__init__.py").exists():
                      content = Path("/workspace/src/__init__.py").read_text()
                      if "hello_demo" in content:
                          print("✅ SUCCESS: Function was added to src/__init__.py!")
                          print("")
                          print("Added code:")
                          print("-" * 80)
                          for line in content.split("\n"):
                              if "hello_demo" in line or (line.strip() and "demo" in line.lower()):
                                  print(f"  {line}")
                      else:
                          print("⚠️  Function not found in file")
                  
                  print("")
                  print("🎉 Demo Complete!")
                  print("")
                  
                  # Export reasoning log as JSON
                  log_file = Path("/tmp/reasoning_log.json")
                  log_file.write_text(json.dumps(result.reasoning_log, indent=2))
                  print(f"📄 Full reasoning log saved to: {log_file}")
                  print(f"   ({len(result.reasoning_log)} thoughts captured)")
                  
                  return result.success
              
              if __name__ == "__main__":
                  success = asyncio.run(main())
                  sys.exit(0 if success else 1)
              DEMO_SCRIPT
              
              # Run demo
              python /tmp/demo_agent.py
              
              DEMO_EXIT=$?
              
              echo ""
              echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              echo ""
              
              if [ $DEMO_EXIT -eq 0 ]; then
                echo "✅ Agent Demo Completed Successfully!"
                echo ""
                echo "This demonstrates:"
                echo "  ✓ Agent receives task and context"
                echo "  ✓ Agent uses tools to analyze and modify code"
                echo "  ✓ Agent logs internal reasoning at each step"
                echo "  ✓ Complete audit trail captured"
                echo ""
                echo "Ready for:"
                echo "  - Investor demos"
                echo "  - Production deployment"
                echo "  - Integration with Ray and Orchestrator"
              else
                echo "❌ Demo failed - check logs above"
              fi
              
              exit $DEMO_EXIT
          
          workingDir: /workspace
          volumeMounts:
            - name: workspace
              mountPath: /workspace
          
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "2"
              memory: "2Gi"
          
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
      
      volumes:
        - name: workspace
          emptyDir: {}

