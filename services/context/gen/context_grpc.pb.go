// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: context.proto

package contextv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContextService_GetContext_FullMethodName    = "/fleet.context.v1.ContextService/GetContext"
	ContextService_UpdateContext_FullMethodName = "/fleet.context.v1.ContextService/UpdateContext"
)

// ContextServiceClient is the client API for ContextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ContextService provides hydrated prompts based on role/phase
type ContextServiceClient interface {
	GetContext(ctx context.Context, in *GetContextRequest, opts ...grpc.CallOption) (*GetContextResponse, error)
	UpdateContext(ctx context.Context, in *UpdateContextRequest, opts ...grpc.CallOption) (*UpdateContextResponse, error)
}

type contextServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContextServiceClient(cc grpc.ClientConnInterface) ContextServiceClient {
	return &contextServiceClient{cc}
}

func (c *contextServiceClient) GetContext(ctx context.Context, in *GetContextRequest, opts ...grpc.CallOption) (*GetContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContextResponse)
	err := c.cc.Invoke(ctx, ContextService_GetContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextServiceClient) UpdateContext(ctx context.Context, in *UpdateContextRequest, opts ...grpc.CallOption) (*UpdateContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateContextResponse)
	err := c.cc.Invoke(ctx, ContextService_UpdateContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContextServiceServer is the server API for ContextService service.
// All implementations must embed UnimplementedContextServiceServer
// for forward compatibility.
//
// ContextService provides hydrated prompts based on role/phase
type ContextServiceServer interface {
	GetContext(context.Context, *GetContextRequest) (*GetContextResponse, error)
	UpdateContext(context.Context, *UpdateContextRequest) (*UpdateContextResponse, error)
	mustEmbedUnimplementedContextServiceServer()
}

// UnimplementedContextServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContextServiceServer struct{}

func (UnimplementedContextServiceServer) GetContext(context.Context, *GetContextRequest) (*GetContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContext not implemented")
}
func (UnimplementedContextServiceServer) UpdateContext(context.Context, *UpdateContextRequest) (*UpdateContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContext not implemented")
}
func (UnimplementedContextServiceServer) mustEmbedUnimplementedContextServiceServer() {}
func (UnimplementedContextServiceServer) testEmbeddedByValue()                        {}

// UnsafeContextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContextServiceServer will
// result in compilation errors.
type UnsafeContextServiceServer interface {
	mustEmbedUnimplementedContextServiceServer()
}

func RegisterContextServiceServer(s grpc.ServiceRegistrar, srv ContextServiceServer) {
	// If the following call pancis, it indicates UnimplementedContextServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContextService_ServiceDesc, srv)
}

func _ContextService_GetContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).GetContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_GetContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).GetContext(ctx, req.(*GetContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextService_UpdateContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextServiceServer).UpdateContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContextService_UpdateContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextServiceServer).UpdateContext(ctx, req.(*UpdateContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContextService_ServiceDesc is the grpc.ServiceDesc for ContextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fleet.context.v1.ContextService",
	HandlerType: (*ContextServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContext",
			Handler:    _ContextService_GetContext_Handler,
		},
		{
			MethodName: "UpdateContext",
			Handler:    _ContextService_UpdateContext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "context.proto",
}
