# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import context_pb2 as context__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in context_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ContextServiceStub(object):
    """ContextService provides hydrated context for agents based on role, phase, and scope policies
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetContext = channel.unary_unary(
                '/fleet.context.v1.ContextService/GetContext',
                request_serializer=context__pb2.GetContextRequest.SerializeToString,
                response_deserializer=context__pb2.GetContextResponse.FromString,
                _registered_method=True)
        self.UpdateContext = channel.unary_unary(
                '/fleet.context.v1.ContextService/UpdateContext',
                request_serializer=context__pb2.UpdateContextRequest.SerializeToString,
                response_deserializer=context__pb2.UpdateContextResponse.FromString,
                _registered_method=True)
        self.RehydrateSession = channel.unary_unary(
                '/fleet.context.v1.ContextService/RehydrateSession',
                request_serializer=context__pb2.RehydrateSessionRequest.SerializeToString,
                response_deserializer=context__pb2.RehydrateSessionResponse.FromString,
                _registered_method=True)
        self.ValidateScope = channel.unary_unary(
                '/fleet.context.v1.ContextService/ValidateScope',
                request_serializer=context__pb2.ValidateScopeRequest.SerializeToString,
                response_deserializer=context__pb2.ValidateScopeResponse.FromString,
                _registered_method=True)


class ContextServiceServicer(object):
    """ContextService provides hydrated context for agents based on role, phase, and scope policies
    """

    def GetContext(self, request, context):
        """GetContext retrieves hydrated context for an agent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateContext(self, request, context):
        """UpdateContext records context changes from agent execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RehydrateSession(self, request, context):
        """RehydrateSession rebuilds context from persistent storage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateScope(self, request, context):
        """ValidateScope checks if provided scopes are allowed for role/phase
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ContextServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetContext': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContext,
                    request_deserializer=context__pb2.GetContextRequest.FromString,
                    response_serializer=context__pb2.GetContextResponse.SerializeToString,
            ),
            'UpdateContext': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateContext,
                    request_deserializer=context__pb2.UpdateContextRequest.FromString,
                    response_serializer=context__pb2.UpdateContextResponse.SerializeToString,
            ),
            'RehydrateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.RehydrateSession,
                    request_deserializer=context__pb2.RehydrateSessionRequest.FromString,
                    response_serializer=context__pb2.RehydrateSessionResponse.SerializeToString,
            ),
            'ValidateScope': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateScope,
                    request_deserializer=context__pb2.ValidateScopeRequest.FromString,
                    response_serializer=context__pb2.ValidateScopeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fleet.context.v1.ContextService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('fleet.context.v1.ContextService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ContextService(object):
    """ContextService provides hydrated context for agents based on role, phase, and scope policies
    """

    @staticmethod
    def GetContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fleet.context.v1.ContextService/GetContext',
            context__pb2.GetContextRequest.SerializeToString,
            context__pb2.GetContextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fleet.context.v1.ContextService/UpdateContext',
            context__pb2.UpdateContextRequest.SerializeToString,
            context__pb2.UpdateContextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RehydrateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fleet.context.v1.ContextService/RehydrateSession',
            context__pb2.RehydrateSessionRequest.SerializeToString,
            context__pb2.RehydrateSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateScope(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fleet.context.v1.ContextService/ValidateScope',
            context__pb2.ValidateScopeRequest.SerializeToString,
            context__pb2.ValidateScopeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
