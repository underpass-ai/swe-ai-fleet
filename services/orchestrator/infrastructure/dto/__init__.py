"""Infrastructure DTOs.

This module wraps autogenerated protobuf DTOs to decouple from implementation details.
By importing pb2 modules and re-exporting them with generic names, we hide the fact
that protobuf is used under the hood.

Following Hexagonal Architecture:
- Domain and Application layers import from this module
- They don't know/care that protobuf is the underlying technology
- Changing from protobuf to another serialization format only affects this module

Naming convention:
- orchestrator_dto: Message types (requests, responses, data structures)
- orchestrator_grpc_dto: gRPC service definitions (servicers, stubs)
"""

from __future__ import annotations

# Import autogenerated protobuf modules
from services.orchestrator.gen import orchestrator_pb2, orchestrator_pb2_grpc

# Re-export as generic DTO modules (hiding protobuf implementation)
orchestrator_dto = orchestrator_pb2  # Message types
orchestrator_grpc_dto = orchestrator_pb2_grpc  # gRPC service definitions

# Also export specific classes for convenience
OrchestratorServiceServicer = orchestrator_pb2_grpc.OrchestratorServiceServicer
add_OrchestratorServiceServicer_to_server = (
    orchestrator_pb2_grpc.add_OrchestratorServiceServicer_to_server
)

__all__ = [
    # Module aliases (primary API)
    "orchestrator_dto",
    "orchestrator_grpc_dto",
    # Servicer classes
    "OrchestratorServiceServicer",
    "add_OrchestratorServiceServicer_to_server",
]

