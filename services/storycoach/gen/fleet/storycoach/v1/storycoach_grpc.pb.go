// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: storycoach.proto

package storycoachv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StoryCoachService_ScoreStory_FullMethodName   = "/fleet.storycoach.v1.StoryCoachService/ScoreStory"
	StoryCoachService_RefineStory_FullMethodName  = "/fleet.storycoach.v1.StoryCoachService/RefineStory"
	StoryCoachService_SuggestStory_FullMethodName = "/fleet.storycoach.v1.StoryCoachService/SuggestStory"
)

// StoryCoachServiceClient is the client API for StoryCoachService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StoryCoachService helps PO write better stories with scoring and refinement
type StoryCoachServiceClient interface {
	ScoreStory(ctx context.Context, in *ScoreStoryRequest, opts ...grpc.CallOption) (*ScoreStoryResponse, error)
	RefineStory(ctx context.Context, in *RefineStoryRequest, opts ...grpc.CallOption) (*RefineStoryResponse, error)
	SuggestStory(ctx context.Context, in *SuggestStoryRequest, opts ...grpc.CallOption) (*SuggestStoryResponse, error)
}

type storyCoachServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoryCoachServiceClient(cc grpc.ClientConnInterface) StoryCoachServiceClient {
	return &storyCoachServiceClient{cc}
}

func (c *storyCoachServiceClient) ScoreStory(ctx context.Context, in *ScoreStoryRequest, opts ...grpc.CallOption) (*ScoreStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoreStoryResponse)
	err := c.cc.Invoke(ctx, StoryCoachService_ScoreStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyCoachServiceClient) RefineStory(ctx context.Context, in *RefineStoryRequest, opts ...grpc.CallOption) (*RefineStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefineStoryResponse)
	err := c.cc.Invoke(ctx, StoryCoachService_RefineStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyCoachServiceClient) SuggestStory(ctx context.Context, in *SuggestStoryRequest, opts ...grpc.CallOption) (*SuggestStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuggestStoryResponse)
	err := c.cc.Invoke(ctx, StoryCoachService_SuggestStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoryCoachServiceServer is the server API for StoryCoachService service.
// All implementations must embed UnimplementedStoryCoachServiceServer
// for forward compatibility.
//
// StoryCoachService helps PO write better stories with scoring and refinement
type StoryCoachServiceServer interface {
	ScoreStory(context.Context, *ScoreStoryRequest) (*ScoreStoryResponse, error)
	RefineStory(context.Context, *RefineStoryRequest) (*RefineStoryResponse, error)
	SuggestStory(context.Context, *SuggestStoryRequest) (*SuggestStoryResponse, error)
	mustEmbedUnimplementedStoryCoachServiceServer()
}

// UnimplementedStoryCoachServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStoryCoachServiceServer struct{}

func (UnimplementedStoryCoachServiceServer) ScoreStory(context.Context, *ScoreStoryRequest) (*ScoreStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScoreStory not implemented")
}
func (UnimplementedStoryCoachServiceServer) RefineStory(context.Context, *RefineStoryRequest) (*RefineStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefineStory not implemented")
}
func (UnimplementedStoryCoachServiceServer) SuggestStory(context.Context, *SuggestStoryRequest) (*SuggestStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestStory not implemented")
}
func (UnimplementedStoryCoachServiceServer) mustEmbedUnimplementedStoryCoachServiceServer() {}
func (UnimplementedStoryCoachServiceServer) testEmbeddedByValue()                           {}

// UnsafeStoryCoachServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoryCoachServiceServer will
// result in compilation errors.
type UnsafeStoryCoachServiceServer interface {
	mustEmbedUnimplementedStoryCoachServiceServer()
}

func RegisterStoryCoachServiceServer(s grpc.ServiceRegistrar, srv StoryCoachServiceServer) {
	// If the following call pancis, it indicates UnimplementedStoryCoachServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StoryCoachService_ServiceDesc, srv)
}

func _StoryCoachService_ScoreStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryCoachServiceServer).ScoreStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryCoachService_ScoreStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryCoachServiceServer).ScoreStory(ctx, req.(*ScoreStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryCoachService_RefineStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefineStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryCoachServiceServer).RefineStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryCoachService_RefineStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryCoachServiceServer).RefineStory(ctx, req.(*RefineStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryCoachService_SuggestStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryCoachServiceServer).SuggestStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoryCoachService_SuggestStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryCoachServiceServer).SuggestStory(ctx, req.(*SuggestStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoryCoachService_ServiceDesc is the grpc.ServiceDesc for StoryCoachService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoryCoachService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fleet.storycoach.v1.StoryCoachService",
	HandlerType: (*StoryCoachServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScoreStory",
			Handler:    _StoryCoachService_ScoreStory_Handler,
		},
		{
			MethodName: "RefineStory",
			Handler:    _StoryCoachService_RefineStory_Handler,
		},
		{
			MethodName: "SuggestStory",
			Handler:    _StoryCoachService_SuggestStory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storycoach.proto",
}
