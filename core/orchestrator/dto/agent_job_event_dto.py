"""DTO for Agent Job Events in the orchestrator."""

from __future__ import annotations

from dataclasses import dataclass


@dataclass(frozen=True)
class AgentJobEventDTO:
    """Data Transfer Object for agent job events.
    
    Represents an event generated by an agent worker during task execution.
    """
    
    timestamp: str
    sprint_id: str
    task_id: str
    role: str
    status: str
    artifacts: str
    component: str = "AgentWorker"
    
    def to_dict(self) -> dict[str, str]:
        """Convert the DTO to a dictionary for JSON serialization."""
        return {
            "ts": self.timestamp,
            "sprint_id": self.sprint_id,
            "task_id": self.task_id,
            "role": self.role,
            "status": self.status,
            "artifacts": self.artifacts,
            "component": self.component,
        }
    
    @classmethod
    def from_dict(cls, data: dict[str, str]) -> AgentJobEventDTO:
        """Create a DTO from a dictionary."""
        return cls(
            timestamp=data["ts"],
            sprint_id=data["sprint_id"],
            task_id=data["task_id"],
            role=data["role"],
            status=data["status"],
            artifacts=data["artifacts"],
            component=data.get("component", "AgentWorker"),
        )
